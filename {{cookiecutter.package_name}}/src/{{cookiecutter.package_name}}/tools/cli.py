from pathlib import Path

from jinja2 import Template
import click
import re

from vivarium_gbd_access.gbd import ARTIFACT_FOLDER
from vivarium_cluster_tools.psimulate.utilities import get_drmaa

JOB_MEMORY_NEEDED = 50
JOB_TIME_NEEDED = '24:00:00'

drmaa = get_drmaa()  # safe if not on cluster


def create_and_run_job(model_spec_path: Path, output_root: Path):
    with drmaa.Session() as s:
        jt = s.createJobTemplate()
        jt.remoteCommand = "build_artifact"
        jt.nativeSpecification = '-V -l m_mem_free={}G,fthread=1,h_rt={} -q all.q -P proj_cost_effect'.format(
            JOB_MEMORY_NEEDED, JOB_TIME_NEEDED)
        jt.args = [model_spec_path, '-o', output_root]
        jt.jobName = f'build_artifact_{model_spec_path.name}'
        result = s.runJob(jt)
        print(f"Submitted job for {model_spec_path.name}. Job id: {result}")


@click.command()
@click.option('--model_spec', '-m', multiple=True, type=click.Path(dir_okay=False, exists=True),
              help='Multiple model spec files can be provided. Each requires the option switch.')
@click.option('--project_name', default='vivarium_conic_sam_comparison',
              help='The name of the research project. Used if no output root is provided.')
@click.option('--output-root', '-o', type=click.Path(file_okay=False, exists=True),
              help='A directory root to store artifact results in.')
def pbuild_artifacts(model_spec, project_name, output_root):
    """Build artifacts in parallel from model specifications. Supports multiple
    model specification files with the -m flag.
    """
    output_root = output_root if output_root else ARTIFACT_FOLDER / project_name
    for m in model_spec:
        p = Path(m)
        create_and_run_job(p.resolve(), output_root)


NEWLINE='\n'
COMMENT_CHAR='#'
DEFAULT_LOCATIONS_FILE='locations.txt'
    
def get_sanitized_locations(loc_file):
    chunks = []
    with open(loc_file, 'r') as infile:
        s = infile.read().strip()
        chunks = s.split(NEWLINE) if NEWLINE in s else re.split('[ ,\t]', s)
    return [i.strip() for i in chunks if not i.strip().startswith(COMMENT_CHAR)]


@click.command()
@click.option('-t', '--template', type=click.Path(dir_okay=False, exists=True), help='The model spec template file')
@click.option('-l', '--locations',
        default=DEFAULT_LOCATIONS_FILE,
        type=click.Path(dir_okay=False, exists=True),
        help=f'The file with the location parameters for the template. The default is "{DEFAULT_LOCATIONS_FILE}"')
def generate_spec_from_template(template, locations_file):
    """Generate model specifications based on a TEMPLATE. Supply the locations for which
        you want a model spec generated by filling in the empty 'locations.txt' file.
        The location file can be space|comma|tab|newline delimited.
        
    TEMPLATE is a model specification file. It should be a jinja2 template with
    a keyword for location.

    """
    with open(template, 'r') as infile:
        temp = Template(infile.read())

        locations = get_sanitized_locations(locations_file)
        for loc in locations:
            with open(f'{project_name}_{loc}.yaml', 'w+') as outfile:
                outfile.write(temp.render(
                    location=loc
                ))
