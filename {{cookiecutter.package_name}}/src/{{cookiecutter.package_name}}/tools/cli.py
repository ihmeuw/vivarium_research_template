import click
from pathlib import Path
from jinja2 import Template
import re
from collections import namedtuple

from typing import List

PROJ_NAME='{{cookiecutter.package_name}}'

COMMENT_CHAR='#'
MODEL_SPEC_DIR=Path(__file__).parent.parent / 'model_specifications'
DEFAULT_TEMPLATE_FILE=MODEL_SPEC_DIR / 'model_spec.in'
DEFAULT_LOCATIONS_FILE=MODEL_SPEC_DIR / 'locations.txt'
Location = namedtuple('Location', ['loc_proper', 'loc_sanitized'])


def sanitize(loc: str) -> (bool, Location):
    loc_proper = loc.strip()
    if loc.startswith(COMMENT_CHAR):
        loc_proper = loc_sanitized = ''
    else:
        loc_sanitized = loc_proper
        loc_sanitized = re.sub(REPLACE_WITH_UNDERSCORE, '_', loc_sanitized).lower()
    return True if len(loc_proper) else False, Location(loc_proper, loc_sanitized)


REPLACE_WITH_UNDERSCORE="[- ,.&']"
def get_sanitized_locations(single_loc : str, loc_file : Path) -> List[Location]:
    """ Naming convention is to lowercase the location string, replace spaces with underscores,
        and capitalize the first letter. No manipulation happens in the template code.
    """
    def helper(item):
        valid, loc = sanitize(item)
        if valid:
            locs.append(loc)

    locs = []
    if len(single_loc):
        helper(single_loc)
    else:
        with loc_file.open('r') as infile:
            for line in infile:
                helper(line)
    return locs
    
    
def args_pass(template: Path, locations_file: Path, single_location: str, output_dir: Path) -> bool:
    error = ''
    if not template.exists():
        error = f'\nError: the template file {template} does not exist.'
    elif not locations_file.exists():
        error = f'\nError: the locations file {locations_file} does not exist.'
    elif not len(single_location) and not locations_file.stat().st_size:
        error = f'\nError: the locations file {locations_file} is empty. Add locations ' \
                'to this file, or, use the "-s" switch to specify a single location.'
    elif not output_dir.exists():
        error = f'\nError: the output director {output_dir} does not exist.'

    if len(error):
        print(error)

    return True if 0 == len(error) else False


@click.command()
@click.option('-l', '--locations_file',
                default=DEFAULT_LOCATIONS_FILE,
                show_default=True,
                type=click.Path(dir_okay=False, exists=True),
                help=f'The file with the location parameters for the template')
@click.option('-t', '--template',
                default=DEFAULT_TEMPLATE_FILE,
                show_default=True,
                type=click.Path(dir_okay=False, exists=True),
                help='The model spec template file')
@click.option('-s', '--single_location',
                default='',
                help='Specify a single location name. This takes precedence over the default locations file')
@click.option('-o', '--output_dir',
                default=MODEL_SPEC_DIR,
                show_default=True,
                type=click.Path(dir_okay=True, exists=True),
                help='Specify an output directory. Directory must exist.')
def make_specs(template: Path, locations_file : Path, single_location: str, output_dir: Path) -> None:
    """
    Generate model specifications based on a TEMPLATE. Supply the locations for which
    you want a model spec generated by filling in the empty 'locations.txt' file.
    The location file should contain a single location per line and locations must
    be formatted so that they match location names in GBD location set X
    """
    if args_pass(template, locations_file, single_location, output_dir):
        with template.open('r') as infile:
            jinja_temp = Template(infile.read())

            locations = get_sanitized_locations(single_location, locations_file)
            if len(locations):
                print(f'\nWriting model spec(s) to "{output_dir}"')
            for loc in locations:
                filespec = output_dir / f'{loc.loc_sanitized}.yaml'
                with filespec.open('w+') as outfile:
                    print(f'   {filespec.name}')
                    outfile.write(jinja_temp.render(
                        location_proper=loc.loc_proper,
                        location_sanitized=loc.loc_sanitized))
